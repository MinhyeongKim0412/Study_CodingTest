# https://school.programmers.co.kr/learn/courses/30/lessons/181893
###############################################################################
#%%
def solution(arr, query):
    for i in range(len(query)):
        if i % 2 == 0:
            arr = arr[:query[i] + 1]
        else:
            arr = arr[query[i]:]
    return arr
###############################################################################
# [접근]--------------------------------------------------------------------
# -홀짝 구분 어떻게? : 나눗셈 후 나머지(%)가 0이면 짝수, 1이면 홀수
# -잘라내는 길이의 기준은?: 짝: i 뒤의 것부터 시작 (+1 처리) / 홀수: i부터 시작
# -얼마나 반복?: 주어진 배열 query의 총 길이만큼(len)
# -앞뒷부분을 잘라내는데 어떤 함수를 쓸까?
# : 잘라내는 건 split과 slicing이 있음. 분할이 아닌 일부를 '삭제'하는 거라서 slicing이 더 효율적임.

# [구조]--------------------------------------------------------------------
# 1. 함수 정의
# 2. 배열명 정의
# 3. 반복문
# 4. 조건문
# 5. 반환

# [설명]--------------------------------------------------------------------
# <정의>
#     -result: 결과값을 담는 함수
#     -arr: 배열 - 원본(이후 수정됨)
#     -query: 배열 - 구분 기준(변하지않음)
#     -i: query 내부의 개별 요소
# <기초>
#     1)기본
#         -def: 함수 정의
#         -len: 길이
#     2)반복문
#         -for: 반복문(순회)
#         -in: ~내부에서
#         -range: 범위~
#     3)조건문
#         -if-else: 조건문(분기)
#     4)기호
#         -%: 나눗셈 이후 나머지 값
#         - ==: 일치 (=와 다름)
#         - =: 할당 (==와 다름)
#         -[]:배열
#         - + : 더하기 연산자
#         - : : 범위지정 연산자
#         - return: 반환되는 값
# [보완]--------------------------------------------------------------------
#     <풀 수 있을 다른 방법들>
#         - Deque 적용: 앞뒤라는 양방향으로 작업하므로 적용가능함.(pop, popleft 사용)