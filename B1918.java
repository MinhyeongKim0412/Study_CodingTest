package July.complete;

import java.util.Scanner;
import java.util.Stack;

public class B1918 {
    public static void main(String[] args) {
        // 스캐너 객체를 사용하여 입력받기
        Scanner sc = new Scanner(System.in);

        // 입력된 중위 표기식을 저장할 문자열
        String infix = sc.nextLine();

        // 결과로 출력할 후위 표기식을 저장할 StringBuilder 객체
        StringBuilder postfix = new StringBuilder();

        // 연산자들을 저장할 스택
        Stack<Character> stack = new Stack<>();

        // 중위 표기식의 각 문자를 하나씩 처리
        for (int i = 0; i < infix.length(); i++) {
            char ch = infix.charAt(i);

            // 피연산자(알파벳)는 그대로 출력 문자열에 추가
            if (Character.isLetter(ch)) {
                postfix.append(ch);
            }
            // 여는 괄호는 스택에 추가
            else if (ch == '(') {
                stack.push(ch);
            }
            // 닫는 괄호는 여는 괄호를 만날 때까지 스택에서 연산자를 꺼내어 출력 문자열에 추가
            else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop(); // 여는 괄호 제거
            }
            // 연산자는 우선순위에 따라 스택에서 꺼내어 출력 문자열에 추가하고, 현재 연산자를 스택에 추가
            else {
                while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(ch)) {
                    postfix.append(stack.pop());
                }
                stack.push(ch);
            }
        }

        // 스택에 남아 있는 모든 연산자를 출력 문자열에 추가
        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        // 후위 표기식 결과 출력
        System.out.println(postfix.toString());
    }

    // 연산자의 우선순위를 반환하는 함수
    // '+'와 '-'는 1의 우선순위를 가지며, '*'와 '/'는 2의 우선순위를 가짐
    private static int precedence(char op) {
        switch (op) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return 0;
        }
    }
}
/*
 * 2024-07-10
 * --------------------------------------------------------
 * [[1차 정리]]
 * <문제 분석>
 * - 중위->후위 (표기법 변환)
 * 1) 괄호 - 연산 우선순위에 따라
 * 2) 연산자 이동 - (상동)
 * 
 * <출력>
 * <1> 값(중위) 입력
 * <2> 변환과정
 * 1. 괄호 묶기
 * 2. 연산자 이동
 * <3> 결과(후위) 출력
 * 
 * <설계>
 * 1)
 * [함수] => 문자열 결과값 생성 --- (1)
 * : 알파벳 문자가 아닌건(+,-,*,/,(,)) 모두 삭제, 남은 문자열들 이어붙이기
 * 
 * [조건문] => 연산자열 결과값 생성 --- (2)
 * 1. 괄호가 있는가?
 * 
 * 1-1. -> 있다면:
 * 1-1-1. 괄호 안의 연산자부터 / 연산자열로 모두 합치기
 * 
 * 1-2. -> 없다면: 우선순위 규칙에 따라서 / 연산자열로 합치기
 * 1-2-1. 연산자열 합칠 때 우선순위
 * 1순위: "*", "/" (곱하기, 나누기)
 * 2순위: "+", "-" (더하기, 빼기)
 * --------------------------------------------------------
 * <보완할 점>
 * - 전체 설계를 더 구조화해서 왜 이 코드를 작성하는지 목적을 확실히 표현하고,
 * 어떻게 작동하는지 방식을 정확하게 기재해주기
 * => 다음부터는 '(초기화 ->) 입력 -> 처리 -> 변환 과정 -> 최종 출력'으로 단계 구분
 * - 스택 알고리즘에 대한 이해를 더 늘려야함, 왜 사용하는지 이해해야 함.
 * 연산자 우선순위 규칙까진 정했지만 이를 비교하고 처리하는 과정을 더 구체적으로 적어주어야할듯.
 * (이를 통해 연산자를 관리하는 방법을 구체적으로 기재하기)
 * - 괄호 구분: "("와 ")"를 다르게 구분해주어야함.
 * --------------------------------------------------------
 * [[2차 정리]]
 * +
 * 스택 사용 이유:
 * 연산자의 우선순위와 괄호의 처리를 효율적으로 관리하기 위해
 * 스택은 후입선출(LIFO) 구조로, 연산자 '우선순위'에 따라 연산자를 적절히 배치 가능
 * 
 * <초기화 작업>, <입력 값 처리>
 * 1. 변수 선언(+자료형) [스택 사용]
 * - 자료형: 문자열
 * - 변수: 입력받은값, 최종결과값, 스택(연산자 저장하기 위함)
 * 
 * <변환>
 * 3. 사전작업
 * 
 * 3-1. 연산자 우선순위 반환 [함수: switch-case]
 * 
 * 3-1. 입력값을 구성하는 문자 1개마다 확인 및 종류 별 처리
 * [반복문 for/if/else if/while : 문자열 길이만큼 반복 ]
 * [조건문 if: 문자 종류 별 처리]
 * -if 1 : 피연산자(일반알파벳) => 출력 문자열에 추가
 * -if 2 : 괄호
 * --if 2-1 : ( => 스택에 쌓아놓기
 * --if 2-2 : ) => 삭제
 * else(if1,2둘 다 아니면) : 연산자 => 출력 문자열에 추가
 * 
 * 3-3. 연산자 확인 및 처리 [조건]
 * <최종 결과값 출력>
 * - 최종결과값.문자열로변환
 */
